コピペ用(スキル効果=>実装コード)

<錬成武器判定>
if (targetUnit.isWeaponRefined) {}
<特殊錬成武器判定>
if (targetUnit.isWeaponSpecialRefined) {}

化身状態なら
if (targetUnit.isTransformed) {}

自分から攻撃した時
if (targetUnit.battleContext.initiatesCombat) {
敵から攻撃された時
if (enemyUnit.battleContext.initiatesCombat) {

周囲2マス以内に味方がいる時
if (__isThereAllyIn2Spaces(targetUnit)) {}

周囲Nマス以内に味方がいる時
if (this.__isThereAllyInSpecifiedSpaces(targetUnit, N)) {}

周囲1マス以内に味方がいない時(孤軍)
if (this.__isSolo(targetUnit) || calcPotentialDamage) {}

戦闘中バフ(N)
targetUnit.addAllSpur(N)
targetUnit.atkSpur += N
enemyUnit.atkSpur -= N

周囲2マス以内の味方は、戦闘中、<ステ>+N
__addSpurInRange2(targetUnit, allyUnit, calcPotentialDamage) {
    for (let skillId of allyUnit.enumerateSkills()) {
        if (!calcPotentialDamage) {
            switch (skillId) {
                case XXX.YYY:
                    targetUnit.atkSpur += N;

周囲2マス以内に味方がいる時、戦闘中、自身の<ステ>+N
__addSelfSpurIfAllyAvailableInRange2(targetUnit, skillId, calcPotentialDamage) {
    if (!calcPotentialDamage) {
        switch (skillId) {
            case XXX.YYY:
                targetUnit.atkSpur += N;

戦闘開始時、自身(敵)のHPがN%以上なら
targetUnit.snapshot.restHpPercentage >= N
enemyUnit.snapshot.restHpPercentage >= N

速さが敵よりN以上高い時
__applySkillEffectForUnitAfterCombatStatusFixed() {
    if (targetUnit.getEvalSpdInCombat() >= enemyUnit.getSpdInCombat() + N) {
    }
}

2回攻撃
__setAttackCount(atkUnit, enemyUnit) {
    atkUnit.battleContext.attackCount = 2;
}

絶対追撃
targetUnit.battleContext.followupAttackPriorityIncrement++;

敵は追撃不可
if (!this.__canInvalidateInvalidationOfFollowupAttack(enemyUnit, targetUnit)) {
    --enemyUnit.battleContext.followupAttackPriority;
}

敵の絶対追撃を無効
targetUnit.battleContext.invalidatesAbsoluteFollowupAttack = true;

自身の追撃不可を無効
targetUnit.battleContext.invalidatesInvalidationOfFollowupAttack = true;

反撃不可
static __canDisableCounterAttack(atkUnit, defUnit) {
    return true;
}

自分が受けている攻撃、速さ、守備、魔防の強化の値だけ上昇(強化増幅)
__applyBonusDoubler(targetUnit, enemyUnit) {}

敵の強化の+を無効(強化無効)
targetUnit.battleContext.invalidateAllBuffs();
targetUnit.battleContext.invalidatesAtkBuff = true;

自身の弱化を無効(弱化無効)
targetUnit.battleContext.invalidateAllOwnDebuffs();
targetUnit.battleContext.invalidatesOwnAtkDebuff = true;

敵が不利な状態異常を受けている時
if (enemyUnit.hasNegativeStatusEffect())

HP N回復
targetUnit.reserveHeal(N);

自分の攻撃でダメージを与えた時、自分のHP N回復(与えたダメージが0でも効果は発動)
targetUnit.battleContext.healedHpByAttack = N

戦闘後、HP N回復
__applySkillEffectAfterCombatForUnit() {
  targetUnit.reserveHeal(N);
}

戦闘中と戦闘後、敵はHPを回復できない
targetUnit.battleContext.invalidatesHeal= true;

【回復不可】
unit.addStatusEffect(StatusEffectType.DeepWounds);

敵の奥義カウント変動量-1
targetUnit.battleContext.reducesCooldownCount = true;

自身の奥義発動カウント変動量-を無効
__applyInvalidationSkillEffect() {
    defUnit.battleContext.reducesCooldownCount = false;
}

戦闘中、自身の奥義発動カウント変動量+1
targetUnit.battleContext.increaseCooldownCountForBoth();

奥義が発動しやすい(錬成武器)
resetMaxSpecialCount() {
    specialCountMax -= 1;
}

周囲3マス以内に支援を結んでいる味方の組み合わせ(自分は含まない)がいる時
let units = Array.from(this.enumerateUnitsInTheSameGroupWithinSpecifiedSpaces(targetUnit, 3));
let partners = units.map(u => u.partnerHeroIndex);
targetUnit.battleContext.isThereAnyPartnerPairsIn3Spaces |= units.some(u => partners.includes(u.heroIndex));
if (targetUnit.battleContext.isThereAnyPartnerPairsIn3Spaces) {}

敵の守備か魔防の低い方でダメージ計算(ブレスは実装不要)
targetUnit.battleContext.refersMinOfDefOrRes = true;

戦闘中、最初に受けた攻撃のダメージを30%軽減
targetUnit.battleContext.multDamageReductionRatioOfFirstAttack(0.3, enemyUnit);

ダメージ+N(固定ダメージ)
DamageCalculator.js
__calcFixedAddDamage(atkUnit, defUnit, isPrecombat) {
    // Nダメージ
    fixedAddDamage += N;
    // 速さの20%
    fixedAddDamage += Math.trunc(atkUnit.getEvalSpdInCombat() * 0.2);
}

奥義によるダメージ+N
__calcFixedSpecialAddDamage() {
    fixedSpecialAddDamage += N;
}

ダメージをHPが1残るように軽減(祈り)
__canActivateMiracle() {
    return true;
}

戦闘中に攻撃していれば
__applyAttackSkillEffectAfterCombatNeverthelessDeadForUnit(attackUnit, attackTargetUnit) {}

上記の効果は、各自軍ターン、各敵軍ターンそれぞれについて、このスキル所持者の最初の戦闘のみ
targetUnit.isOneTimeActionActivatedForWeapon

再移動(N)
__canActivateCanto(unit) {}
__calcMoveCountForCanto(unit) {}

天駆の道
function hasPathfinderEffect(skillId) {}

【XXX】の状態を付与
Unit.js
const StatusEffectType = {
    XXX: YYY, // XXX
}
function statusEffectTypeToIconFilePath(value) {
    case StatusEffectType.Dodge:
    return g_imageRootPath + "XXX.png";
}
/// ステータス効果が不利なステータス効果であるかどうかを判定
function isNegativeStatusEffect(type) {}
Main.js
unit.reserveToAddStatusEffect(StatusEffectType.XXX);

比翼・双界英雄
Unit.js
const Hero = {
    XXX: YYY,
}
    get isDuoHero() {
                || this.heroIndex == Hero.XXX
    }
Main.js
    __activateDuoOrHarmonizedSkill(duoUnit) {
        // 同じ出典のキャラクターに付与
        this.__addStatusEffectToSameOriginUnits(duoUnit, StatusEffectType.ZZZ);
    }
